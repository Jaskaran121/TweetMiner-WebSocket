[0m[[0m[0mdebug[0m] [0m[0mThe service.MockTwitterService$mockHashTagEntiy has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(getEnd,[Default]), UsedName(notifyAll,[Default]), UsedName(hashtag,[Default]), UsedName(getStart,[Default]), UsedName(mockHashTagEntiy,[Default]), UsedName(wait,[Default]), UsedName(getText,[Default]), UsedName(service;MockTwitterService$mockHashTagEntiy;init;,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) service.MockTwitterService$mockHashTagEntiy: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) service.MockTwitterService$mockHashTagEntiy.[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.SearchResultsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.TweetTest[0m
[0m[[0m[0mdebug[0m] [0m[0mThe service.MockTwitterService$mockStatus has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getLang,[Default]), UsedName(username,[Default]), UsedName(hashtags,[Default]), UsedName(getId,[Default]), UsedName(READ_WRITE,[Default]), UsedName(READ_WRITE_DIRECTMESSAGES,[Default]), UsedName(getWithheldInCountries,[Default]), UsedName(equals,[Default]), UsedName(isPossiblySensitive,[Default]), UsedName(isRetweeted,[Default]), UsedName(service;MockTwitterService$mockStatus;init;,[Default]), UsedName(isTruncated,[Default]), UsedName(getRetweetedStatus,[Default]), UsedName(READ,[Default]), UsedName(getInReplyToUserId,[Default]), UsedName(locatioName,[Default]), UsedName(getMediaEntities,[Default]), UsedName(tweet,[Default]), UsedName(getCurrentUserRetweetId,[Default]), UsedName(getSource,[Default]), UsedName(getPlace,[Default]), UsedName(getQuotedStatus,[Default]), UsedName(notifyAll,[Default]), UsedName(getAccessLevel,[Default]), UsedName(getUserMentionEntities,[Default]), UsedName(getURLEntities,[Default]), UsedName(getScopes,[Default]), UsedName(longitude,[Default]), UsedName(mockStatus,[Default]), UsedName(isRetweetedByMe,[Default]), UsedName(getSymbolEntities,[Default]), UsedName(getQuotedStatusId,[Default]), UsedName(getGeoLocation,[Default]), UsedName(compareTo,[Default]), UsedName(getHashtagEntities,[Default]), UsedName(getContributors,[Default]), UsedName(isFavorited,[Default]), UsedName(getFavoriteCount,[Default]), UsedName(wait,[Default]), UsedName(getUser,[Default]), UsedName(getText,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(getInReplyToScreenName,[Default]), UsedName(getDisplayTextRangeStart,[Default]), UsedName(getDisplayTextRangeEnd,[Default]), UsedName(getRateLimitStatus,[Default]), UsedName(isRetweet,[Default]), UsedName(getCreatedAt,[Default]), UsedName(getInReplyToStatusId,[Default]), UsedName(getRetweetCount,[Default]), UsedName(notify,[Default]), UsedName(lattitude,[Default]), UsedName(NONE,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) service.MockTwitterService$mockStatus: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) service.MockTwitterService$mockStatus.[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.TestDataProcessingOnSerchTweetsModel[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.HashTagActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.LocationActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.TweetUserActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mThe service.MockTwitterService$mockUser has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(getMiniProfileImageURLHttps,[Default]), UsedName(getLang,[Default]), UsedName(isGeoEnabled,[Default]), UsedName(getId,[Default]), UsedName(getListedCount,[Default]), UsedName(READ_WRITE,[Default]), UsedName(getProfileImageURL,[Default]), UsedName(READ_WRITE_DIRECTMESSAGES,[Default]), UsedName(getProfileBannerRetinaURL,[Default]), UsedName(getWithheldInCountries,[Default]), UsedName(getOriginalProfileImageURLHttps,[Default]), UsedName(isTranslator,[Default]), UsedName(equals,[Default]), UsedName(getProfileBackgroundImageUrlHttps,[Default]), UsedName(isVerified,[Default]), UsedName(getDescriptionURLEntities,[Default]), UsedName(getOriginalProfileImageURL,[Default]), UsedName(getURL,[Default]), UsedName(READ,[Default]), UsedName(isShowAllInlineMedia,[Default]), UsedName(screenName,[Default]), UsedName(getBiggerProfileImageURL,[Default]), UsedName(getFavouritesCount,[Default]), UsedName(notifyAll,[Default]), UsedName(isProfileBackgroundTiled,[Default]), UsedName(getFollowersCount,[Default]), UsedName(getAccessLevel,[Default]), UsedName(getURLEntity,[Default]), UsedName(isContributorsEnabled,[Default]), UsedName(isProtected,[Default]), UsedName(isProfileUseBackgroundImage,[Default]), UsedName(getProfileSidebarFillColor,[Default]), UsedName(getBiggerProfileImageURLHttps,[Default]), UsedName(getScreenName,[Default]), UsedName(getDescription,[Default]), UsedName(getProfileTextColor,[Default]), UsedName(getProfileSidebarBorderColor,[Default]), UsedName(compareTo,[Default]), UsedName(getName,[Default]), UsedName(getStatus,[Default]), UsedName(isFollowRequestSent,[Default]), UsedName(wait,[Default]), UsedName(getProfileBackgroundImageURL,[Default]), UsedName(getProfileBannerIPadRetinaURL,[Default]), UsedName(getProfileBannerMobileURL,[Default]), UsedName(getTimeZone,[Default]), UsedName(getUtcOffset,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(getProfileImageURLHttps,[Default]), UsedName(toString,[Default]), UsedName(getProfileBannerMobileRetinaURL,[Default]), UsedName(getMiniProfileImageURL,[Default]), UsedName(getProfileBannerURL,[Default]), UsedName(getStatusesCount,[Default]), UsedName(getRateLimitStatus,[Default]), UsedName(getFriendsCount,[Default]), UsedName(getLocation,[Default]), UsedName(getEmail,[Default]), UsedName(getCreatedAt,[Default]), UsedName(getProfileBannerIPadURL,[Default]), UsedName(getProfileLinkColor,[Default]), UsedName(isDefaultProfile,[Default]), UsedName(mockUser,[Default]), UsedName(getProfileBackgroundColor,[Default]), UsedName(isDefaultProfileImage,[Default]), UsedName(notify,[Default]), UsedName(service;MockTwitterService$mockUser;init;,[Default]), UsedName(NONE,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) service.MockTwitterService$mockUser: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) service.MockTwitterService$mockUser.[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.TestDataProcessingOnSerchTweetsModel[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.TweetUserActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mThe service.MockTwitterService has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(service;MockTwitterService;init;,[Default]), UsedName(equals,[Default]), UsedName(getQueryResult,[Default]), UsedName(notifyAll,[Default]), UsedName(mockPlace,[Default]), UsedName(mockStatus,[Default]), UsedName(mockHashTagEntiy,[Default]), UsedName(showUser,[Default]), UsedName(wait,[Default]), UsedName(getUserTimeline,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(MockTwitterService,[Default]), UsedName(mockUser,[Default]), UsedName(notify,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) service.MockTwitterService: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) service.MockTwitterService.[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: controllertest.ControllerTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.TestDataProcessingOnSerchTweetsModel[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.HashTagActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.LocationActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: ActorsTest.TweetUserActorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.SearchResultsTest[0m
[0m[[0m[0mdebug[0m] [0m[0mName hashing optimization doesn't apply to non-Scala dependency: modelTest.TweetTest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\WordCountActorTest.java)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\UserActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\ReactiveTweetActorTest.java)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\controllertest\ControllerTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\LocationActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\HashTagActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\SearchResultsTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\TweetTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\TweetUserActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\TestDataProcessingOnSerchTweetsModel.java)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(service.MockTwitterService$mockHashTagEntiy,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(getEnd,[Default]), UsedName(notifyAll,[Default]), UsedName(hashtag,[Default]), UsedName(getStart,[Default]), UsedName(mockHashTagEntiy,[Default]), UsedName(wait,[Default]), UsedName(getText,[Default]), UsedName(service;MockTwitterService$mockHashTagEntiy;init;,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(notify,[Default]))), NamesChange(service.MockTwitterService$mockStatus,ModifiedNames(changes = UsedName(getLang,[Default]), UsedName(username,[Default]), UsedName(hashtags,[Default]), UsedName(getId,[Default]), UsedName(READ_WRITE,[Default]), UsedName(READ_WRITE_DIRECTMESSAGES,[Default]), UsedName(getWithheldInCountries,[Default]), UsedName(equals,[Default]), UsedName(isPossiblySensitive,[Default]), UsedName(isRetweeted,[Default]), UsedName(service;MockTwitterService$mockStatus;init;,[Default]), UsedName(isTruncated,[Default]), UsedName(getRetweetedStatus,[Default]), UsedName(READ,[Default]), UsedName(getInReplyToUserId,[Default]), UsedName(locatioName,[Default]), UsedName(getMediaEntities,[Default]), UsedName(tweet,[Default]), UsedName(getCurrentUserRetweetId,[Default]), UsedName(getSource,[Default]), UsedName(getPlace,[Default]), UsedName(getQuotedStatus,[Default]), UsedName(notifyAll,[Default]), UsedName(getAccessLevel,[Default]), UsedName(getUserMentionEntities,[Default]), UsedName(getURLEntities,[Default]), UsedName(getScopes,[Default]), UsedName(longitude,[Default]), UsedName(mockStatus,[Default]), UsedName(isRetweetedByMe,[Default]), UsedName(getSymbolEntities,[Default]), UsedName(getQuotedStatusId,[Default]), UsedName(getGeoLocation,[Default]), UsedName(compareTo,[Default]), UsedName(getHashtagEntities,[Default]), UsedName(getContributors,[Default]), UsedName(isFavorited,[Default]), UsedName(getFavoriteCount,[Default]), UsedName(wait,[Default]), UsedName(getUser,[Default]), UsedName(getText,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(getInReplyToScreenName,[Default]), UsedName(getDisplayTextRangeStart,[Default]), UsedName(getDisplayTextRangeEnd,[Default]), UsedName(getRateLimitStatus,[Default]), UsedName(isRetweet,[Default]), UsedName(getCreatedAt,[Default]), UsedName(getInReplyToStatusId,[Default]), UsedName(getRetweetCount,[Default]), UsedName(notify,[Default]), UsedName(lattitude,[Default]), UsedName(NONE,[Default]))), NamesChange(service.MockTwitterService$mockUser,ModifiedNames(changes = UsedName(getMiniProfileImageURLHttps,[Default]), UsedName(getLang,[Default]), UsedName(isGeoEnabled,[Default]), UsedName(getId,[Default]), UsedName(getListedCount,[Default]), UsedName(READ_WRITE,[Default]), UsedName(getProfileImageURL,[Default]), UsedName(READ_WRITE_DIRECTMESSAGES,[Default]), UsedName(getProfileBannerRetinaURL,[Default]), UsedName(getWithheldInCountries,[Default]), UsedName(getOriginalProfileImageURLHttps,[Default]), UsedName(isTranslator,[Default]), UsedName(equals,[Default]), UsedName(getProfileBackgroundImageUrlHttps,[Default]), UsedName(isVerified,[Default]), UsedName(getDescriptionURLEntities,[Default]), UsedName(getOriginalProfileImageURL,[Default]), UsedName(getURL,[Default]), UsedName(READ,[Default]), UsedName(isShowAllInlineMedia,[Default]), UsedName(screenName,[Default]), UsedName(getBiggerProfileImageURL,[Default]), UsedName(getFavouritesCount,[Default]), UsedName(notifyAll,[Default]), UsedName(isProfileBackgroundTiled,[Default]), UsedName(getFollowersCount,[Default]), UsedName(getAccessLevel,[Default]), UsedName(getURLEntity,[Default]), UsedName(isContributorsEnabled,[Default]), UsedName(isProtected,[Default]), UsedName(isProfileUseBackgroundImage,[Default]), UsedName(getProfileSidebarFillColor,[Default]), UsedName(getBiggerProfileImageURLHttps,[Default]), UsedName(getScreenName,[Default]), UsedName(getDescription,[Default]), UsedName(getProfileTextColor,[Default]), UsedName(getProfileSidebarBorderColor,[Default]), UsedName(compareTo,[Default]), UsedName(getName,[Default]), UsedName(getStatus,[Default]), UsedName(isFollowRequestSent,[Default]), UsedName(wait,[Default]), UsedName(getProfileBackgroundImageURL,[Default]), UsedName(getProfileBannerIPadRetinaURL,[Default]), UsedName(getProfileBannerMobileURL,[Default]), UsedName(getTimeZone,[Default]), UsedName(getUtcOffset,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(getProfileImageURLHttps,[Default]), UsedName(toString,[Default]), UsedName(getProfileBannerMobileRetinaURL,[Default]), UsedName(getMiniProfileImageURL,[Default]), UsedName(getProfileBannerURL,[Default]), UsedName(getStatusesCount,[Default]), UsedName(getRateLimitStatus,[Default]), UsedName(getFriendsCount,[Default]), UsedName(getLocation,[Default]), UsedName(getEmail,[Default]), UsedName(getCreatedAt,[Default]), UsedName(getProfileBannerIPadURL,[Default]), UsedName(getProfileLinkColor,[Default]), UsedName(isDefaultProfile,[Default]), UsedName(mockUser,[Default]), UsedName(getProfileBackgroundColor,[Default]), UsedName(isDefaultProfileImage,[Default]), UsedName(notify,[Default]), UsedName(service;MockTwitterService$mockUser;init;,[Default]), UsedName(NONE,[Default]))), NamesChange(service.MockTwitterService,ModifiedNames(changes = UsedName(service;MockTwitterService;init;,[Default]), UsedName(equals,[Default]), UsedName(getQueryResult,[Default]), UsedName(notifyAll,[Default]), UsedName(mockPlace,[Default]), UsedName(mockStatus,[Default]), UsedName(mockHashTagEntiy,[Default]), UsedName(showUser,[Default]), UsedName(wait,[Default]), UsedName(getUserTimeline,[Default]), UsedName(getClass,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(MockTwitterService,[Default]), UsedName(mockUser,[Default]), UsedName(notify,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(controllertest.ControllerTest, modelTest.TestDataProcessingOnSerchTweetsModel, ActorsTest.HashTagActorTest, ActorsTest.LocationActorTest, ActorsTest.TweetUserActorTest, modelTest.SearchResultsTest, modelTest.TweetTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(controllertest.ControllerTest, modelTest.TestDataProcessingOnSerchTweetsModel, ActorsTest.HashTagActorTest, ActorsTest.LocationActorTest, ActorsTest.TweetUserActorTest, modelTest.SearchResultsTest, modelTest.TweetTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(controllertest.ControllerTest, modelTest.TestDataProcessingOnSerchTweetsModel, ActorsTest.HashTagActorTest, ActorsTest.LocationActorTest, ActorsTest.TweetUserActorTest, modelTest.SearchResultsTest, modelTest.TweetTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\controllertest\ControllerTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\LocationActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\HashTagActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\SearchResultsTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\UserActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\ReactiveTweetActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\TweetTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\ActorsTest\TweetUserActorTest.java, C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\test\modelTest\TestDataProcessingOnSerchTweetsModel.java)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 10 sources: invalidated sources (9) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 10 Java sources to C:\Users\JASKARN SINGH\Desktop\Assignement-2Updated\Soen6441Assignment2\target\scala-2.12\test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mAttempting to call com.sun.tools.javac.api.JavacTool@6809fe19 directly...[0m
[0m[[0m[0mdebug[0m] [0m[0mJava compilation took 2.942542507 s[0m
[0m[[0m[0mdebug[0m] [0m[0mJava analysis took 0.710426454 s[0m
[0m[[0m[0mdebug[0m] [0m[0mJava compilation + analysis took 3.664360107 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
